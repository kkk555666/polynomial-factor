import streamlit as st
import sympy as sp

st.set_page_config(page_title="‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏° & ‡∏´‡∏≤‡∏£", layout="centered")
x = sp.symbols('x')

if "poly_input" not in st.session_state:
    st.session_state.poly_input = ""

input_str = st.session_state.poly_input

st.title("üßÆ ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏° & ‡∏´‡∏≤‡∏£")
st.markdown("‡πÉ‡∏™‡πà‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏° (‡πÄ‡∏ä‡πà‡∏ô `x^3+5*x^2+6*x+1`) ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô")

button_rows = [
    ['7', '8', '9', '‡∏ö‡∏ß‡∏Å', '‡∏•‡∏ö'],
    ['4', '5', '6', '‡∏Ñ‡∏π‡∏ì', '‡∏´‡∏≤‡∏£'],
    ['1', '2', '3', 'x', '^'],
    ['0', '(', ')', '‚å´', '‡∏•‡πâ‡∏≤‡∏á']
]

symbol_map = {
    '‡∏ö‡∏ß‡∏Å': '+',
    '‡∏•‡∏ö': '-',
    '‡∏Ñ‡∏π‡∏ì': '*',
    '‡∏´‡∏≤‡∏£': '/',
}

cols = st.columns(5)
for i, btn in enumerate(sum(button_rows, [])):
    if cols[i % 5].button(btn, key=f"btn_{btn}_{i}"):
        if btn == '‚å´':
            input_str = input_str[:-1] if input_str else ""
        elif btn == '‡∏•‡πâ‡∏≤‡∏á':
            input_str = ""
        else:
            input_str += symbol_map.get(btn, btn)

st.session_state.poly_input = input_str
st.code(input_str, language="plaintext")

st.markdown("---")

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
operation = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", ("‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö", "‡∏´‡∏≤‡∏£‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏°"))

expr_str = input_str.replace("^", "**").replace(" ", "")

try:
    expr = sp.sympify(expr_str, locals={'x': x})
    if expr.free_symbols != {x} and expr.free_symbols != set():
        st.error("‚ùå ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ x ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
    else:
        degree = sp.degree(expr, x)
        if degree is None or degree < 1 or degree > 10:
            st.warning("‚ö†Ô∏è ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏î‡∏µ‡∏Å‡∏£‡∏µ 1 ‡∏ñ‡∏∂‡∏á 10 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        else:
            if operation == "‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö":
                result = sp.factor(expr)
                st.success("‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö:")
                st.code(str(result))
            else:
                st.markdown("**‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ï‡∏±‡πâ‡∏á (Dividend) ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏£ (Divisor)**")
                
                dividend_str = st.text_input("‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ï‡∏±‡πâ‡∏á (Dividend)", value=expr_str, key="dividend")
                divisor_str = st.text_input("‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏£ (Divisor)", value="x+1", key="divisor")
                
                try:
                    dividend = sp.sympify(dividend_str.replace("^", "**"), locals={'x': x})
                    divisor = sp.sympify(divisor_str.replace("^", "**"), locals={'x': x})

                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
                    if (dividend.free_symbols - {x}) or (divisor.free_symbols - {x}):
                        st.error("‚ùå ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô x ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
                    else:
                        q, r = sp.div(dividend, divisor, domain='QQ')
                        st.success("‚úÖ ‡∏ú‡∏•‡∏´‡∏≤‡∏£‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏°:")
                        st.write(f"‡∏ï‡∏±‡∏ß‡∏ï‡∏±‡πâ‡∏á: {dividend}")
                        st.write(f"‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏£: {divisor}")
                        st.write(f"‡∏ú‡∏•‡∏´‡∏≤‡∏£ (Quotient): {q}")
                        st.write(f"‡πÄ‡∏®‡∏© (Remainder): {r}")

                        # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô (Quotient + Remainder/Divisor)
                        if r != 0:
                            fraction_expr = q + r / divisor
                            fraction_simplified = sp.simplify(fraction_expr)
                            st.info("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô:")
                            st.latex(sp.latex(fraction_simplified))
                        else:
                            st.info("‡∏´‡∏≤‡∏£‡∏•‡∏á‡∏ï‡∏±‡∏ß ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏®‡∏©‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {e}")

except Exception as e:
    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
