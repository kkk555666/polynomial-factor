import streamlit as st
import sympy as sp

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤
st.set_page_config(page_title="‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏°", layout="centered")
x = sp.symbols('x')

# ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
if "poly_input" not in st.session_state:
    st.session_state.poly_input = ""

input_str = st.session_state.poly_input

st.title("üßÆ ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏°")
st.markdown("‡πÉ‡∏™‡πà‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô `x^2+5*x+6`")

# ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î
button_rows = [
    ['7', '8', '9', '‡∏ö‡∏ß‡∏Å', '‡∏•‡∏ö'],
    ['4', '5', '6', '‡∏Ñ‡∏π‡∏ì', '‡∏´‡∏≤‡∏£'],
    ['1', '2', '3', 'x', '^'],
    ['0', '(', ')', '‚å´', '‡∏•‡πâ‡∏≤‡∏á']
]

symbol_map = {
    '‡∏ö‡∏ß‡∏Å': '+',
    '‡∏•‡∏ö': '-',
    '‡∏Ñ‡∏π‡∏ì': '*',
    '‡∏´‡∏≤‡∏£': '/',
}

cols = st.columns(5)
for i, btn in enumerate(sum(button_rows, [])):
    if cols[i % 5].button(btn, key=f"btn_{btn}_{i}"):
        if btn == '‚å´':
            input_str = input_str[:-1]
        elif btn == '‡∏•‡πâ‡∏≤‡∏á':
            input_str = ""
        else:
            input_str += symbol_map.get(btn, btn)

st.session_state.poly_input = input_str

# ‡πÅ‡∏™‡∏î‡∏á input
st.code(input_str, language="plaintext")

# ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
if st.button("‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö"):
    expr_str = input_str.replace("^", "**").replace(" ", "")
    try:
        expr = sp.sympify(expr_str, locals={'x': x})
        if expr.free_symbols != {x} and expr.free_symbols != set():
            st.error("‚ùå ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ x ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        else:
            degree = sp.degree(expr, x)
            if degree is None or degree < 2 or degree > 10:
                st.warning("‚ö†Ô∏è ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏î‡∏µ‡∏Å‡∏£‡∏µ 2 ‡∏ñ‡∏∂‡∏á 10 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            else:
                st.success("‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö:")

                # ‚úÖ 1. ‡πÅ‡∏¢‡∏Å‡πÉ‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà extension)
                real_factor = sp.factor(expr)
                st.markdown("**‚û§ ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÉ‡∏ô‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏£‡∏¥‡∏á (Real):**")
                st.code(str(real_factor))

                # ‚úÖ 2. ‡πÅ‡∏¢‡∏Å‡πÉ‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏ã‡πâ‡∏≠‡∏ô (Complex)
                complex_factor = sp.factor(expr, extension=[sp.I])
                st.markdown("**‚û§ ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÉ‡∏ô‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏ã‡πâ‡∏≠‡∏ô (Complex):**")
                st.code(str(complex_factor))

                # ‚úÖ 3. Quadratic form ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Å
                roots = sp.solve(expr, x)
                if len(roots) > 0:
                    quadratic_form = 1
                    for r in roots:
                        quadratic_form *= (x - r)
                    st.markdown("**‚û§ ‡πÅ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Å (Quadratic/Complex Form):**")
                    st.code(str(sp.simplify(quadratic_form)))

    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
