import streamlit as st
import sympy as sp
import matplotlib.pyplot as plt
import numpy as np

st.set_page_config(page_title="‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏°", layout="centered")
x = sp.symbols('x')

if "poly_input" not in st.session_state:
    st.session_state.poly_input = ""

input_str = st.session_state.poly_input

st.title("üßÆ ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏°")
st.markdown("‡πÉ‡∏™‡πà‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏° (‡πÄ‡∏ä‡πà‡∏ô x^2+5*x+6)")

# ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
button_rows = [
    ['7', '8', '9', '‡∏ö‡∏ß‡∏Å', '‡∏•‡∏ö'],
    ['4', '5', '6', '‡∏Ñ‡∏π‡∏ì', '‡∏´‡∏≤‡∏£'],
    ['1', '2', '3', 'x', '^'],
    ['0', '(', ')', '‚å´', '‡∏•‡πâ‡∏≤‡∏á']
]

symbol_map = {
    '‡∏ö‡∏ß‡∏Å': '+',
    '‡∏•‡∏ö': '-',
    '‡∏Ñ‡∏π‡∏ì': '*',
    '‡∏´‡∏≤‡∏£': '/',
}

cols = st.columns(5)
for i, btn in enumerate(sum(button_rows, [])):
    if cols[i % 5].button(btn, key=f"btn_{btn}_{i}"):
        if btn == '‚å´':
            input_str = input_str[:-1]
        elif btn == '‡∏•‡πâ‡∏≤‡∏á':
            input_str = ""
        else:
            input_str += symbol_map.get(btn, btn)
        st.session_state.poly_input = input_str

# ‡πÅ‡∏™‡∏î‡∏á input
st.code(input_str, language="plaintext")

if st.button("‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö"):
    expr_str = input_str.replace("^", "**").replace(" ", "")
    try:
        expr = sp.sympify(expr_str, locals={'x': x})

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà x
        if expr.free_symbols != {x} and expr.free_symbols != set():
            st.error("‚ùå ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ x ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        else:
            degree = sp.degree(expr, x)
            if degree is None or degree < 2 or degree > 4:
                st.warning("‚ö†Ô∏è ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏î‡∏µ‡∏Å‡∏£‡∏µ 2 ‡∏ñ‡∏∂‡∏á 4 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            else:
                # factor
                result = sp.factor(expr)
                if result != expr:
                    st.success("‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö:")
                    st.code(str(result))
                else:
                    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÑ‡∏î‡πâ (‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Å‡πÅ‡∏ó‡∏ô)")

                # ‡∏´‡∏≤ root (real + complex)
                roots = sp.nroots(expr)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                if roots:
                    roots_str = []
                    for r in roots:
                        if abs(r.as_real_imag()[1]) < 1e-8:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô real
                            roots_str.append(f"{float(r):.6f}")
                        else:
                            roots_str.append(str(r))
                    st.info("üìå ‡∏£‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏Å‡∏≤‡∏£: " + ", ".join(roots_str))
                else:
                    st.warning("‚ö† ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Å")

                # === ‡∏Å‡∏£‡∏≤‡∏ü f(x) ===
                st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ç‡∏≠‡∏á f(x)")
                X = np.linspace(-10, 10, 400)
                f_lambd = sp.lambdify(x, expr, 'numpy')
                Y = f_lambd(X)

                fig, ax = plt.subplots()
                ax.axhline(0, color='black', linewidth=1)
                ax.axvline(0, color='black', linewidth=1)
                ax.plot(X, Y, label=f"f(x) = {expr}", color='blue')

                # ‡∏à‡∏∏‡∏î‡∏£‡∏≤‡∏Å‡∏à‡∏£‡∏¥‡∏á
                real_roots = [float(r.evalf()) for r in roots if abs(sp.im(r)) < 1e-8]
                ax.scatter(real_roots, [0]*len(real_roots), color='red', zorder=5, label="‡∏£‡∏≤‡∏Å‡∏à‡∏£‡∏¥‡∏á")

                ax.legend()
                ax.grid(True)
                st.pyplot(fig)

    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

