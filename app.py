import streamlit as st
import sympy as sp

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏°", layout="centered")

# ‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ x ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡∏°‡∏Å‡∏≤‡∏£
x = sp.symbols('x')

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô session
if "poly_input" not in st.session_state:
    st.session_state.poly_input = ""

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
def backspace():
    st.session_state.poly_input = st.session_state.poly_input[:-1]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def clear_input():
    st.session_state.poly_input = ""

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def add_text(t):
    st.session_state.poly_input += t

# CSS ‡∏à‡∏±‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
st.markdown("""
<style>
  div.stButton > button {
    margin: 2px !important;
    min-width: 50px !important;
  }
  div[data-testid="column"] {
    padding: 2px !important;
  }
</style>
""", unsafe_allow_html=True)

# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÄ‡∏ß‡πá‡∏ö
st.title("üßÆ ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏°")
st.markdown("‡πÉ‡∏™‡πà‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏° (‡πÄ‡∏ä‡πà‡∏ô `x^2+5*x+6`)")

# ‡∏Å‡∏•‡πà‡∏≠‡∏á input ‡∏ó‡∏µ‡πà sync ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
user_input = st.text_input("‡∏û‡∏´‡∏∏‡∏ô‡∏≤‡∏°", value=st.session_state.poly_input, key="text_display")

# sync ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ session_state
if user_input != st.session_state.poly_input:
    st.session_state.poly_input = user_input

# ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
st.code(st.session_state.poly_input, language="plaintext")

# ‡∏õ‡∏∏‡πà‡∏°
button_rows = [
    ['7', '8', '9', '‡∏ö‡∏ß‡∏Å', '‡∏•‡∏ö'],
    ['4', '5', '6', '‡∏Ñ‡∏π‡∏ì', '‡∏´‡∏≤‡∏£'],
    ['1', '2', '3', 'x', '^'],
    ['0', '(', ')', '‚å´', '‡∏•‡πâ‡∏≤‡∏á']
]

# ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢
symbol_map = {
    '‡∏ö‡∏ß‡∏Å': '+',
    '‡∏•‡∏ö': '-',
    '‡∏Ñ‡∏π‡∏ì': '*',
    '‡∏´‡∏≤‡∏£': '/',
}

# ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏à‡∏±‡∏î‡πÅ‡∏ô‡∏ß
for row in button_rows:
    cols = st.columns(len(row))
    for i, btn in enumerate(row):
        if cols[i].button(btn, key=f"{btn}_{i}"):
            if btn == '‚å´':
                backspace()
            elif btn == '‡∏•‡πâ‡∏≤‡∏á':
                clear_input()
            else:
                actual = symbol_map.get(btn, btn)
                add_text(actual)

# ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
if st.button("‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö"):
    expr_str = st.session_state.poly_input.replace("^", "**").replace(" ", "")
    try:
        expr = sp.sympify(expr_str, locals={'x': x})
        if expr.free_symbols != {x} and expr.free_symbols != set():
            st.error("‚ùå ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ x ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        else:
            degree = sp.degree(expr, x)
            if degree is None or degree < 2 or degree > 10:
                st.warning("‚ö†Ô∏è ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏î‡∏µ‡∏Å‡∏£‡∏µ 2 ‡∏ñ‡∏∂‡∏á 10 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            else:
                result = sp.factor(expr)
                st.success("‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö:")
                st.code(str(result))
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
